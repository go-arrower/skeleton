// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: query.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const allTenants = `-- name: AllTenants :many
SELECT id, created_at, updated_at, name
FROM auth.tenant
ORDER BY name
`

func (q *Queries) AllTenants(ctx context.Context) ([]AuthTenant, error) {
	rows, err := q.db.Query(ctx, allTenants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AuthTenant
	for rows.Next() {
		var i AuthTenant
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createTenant = `-- name: CreateTenant :exec
INSERT INTO auth.tenant (name)
VALUES ($1)
`

func (q *Queries) CreateTenant(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, createTenant, name)
	return err
}

const findTenantByID = `-- name: FindTenantByID :one
SELECT id, created_at, updated_at, name
FROM auth.tenant
WHERE id = $1
`

func (q *Queries) FindTenantByID(ctx context.Context, id pgtype.UUID) (AuthTenant, error) {
	row := q.db.QueryRow(ctx, findTenantByID, id)
	var i AuthTenant
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}
